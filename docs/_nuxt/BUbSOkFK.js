import{_ as $,u as Z,a as W}from"./BkGJl2ZQ.js";import{_ as w}from"./BFqTcm4f.js";import{a as S,_ as g}from"./zck6Z6fF.js";import{_ as K}from"./CxKyWrla.js";import{_ as ee}from"./DlAUqK2U.js";import{o as f,c as E,a as s,b as n,w as t,h as O,g as y,f as b,d as e,u as ne}from"./0eoLPSdn.js";import{a as te,_ as ae}from"./COc4Puty.js";import{_ as x}from"./BHt_xBA0.js";import{_ as P,a as I,b as T}from"./B6j9K0o-.js";import{_ as G}from"./CtBl-4bT.js";import{_ as se}from"./BnmEXoAC.js";import{_ as J}from"./BSZXaiZV.js";import{_ as R}from"./DysKOmB8.js";import{_ as oe}from"./GCGlyXyH.js";import{_ as le,a as ie,b as re,c as de,d as ce,e as pe}from"./abLuHPNq.js";import{_ as ue}from"./dvIwE-KW.js";import{_ as me}from"./DQimxJDu.js";import{_ as _e}from"./Bag9INXo.js";import{_ as he}from"./C-3WmzZG.js";import{u as ke}from"./abRkgXpJ.js";import"./D4IM-IFr.js";const fe={},ge={viewBox:"0 0 640 440",xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink"},ye=O('<g id="gradleTask"><rect width="120" height="30" fill="chartreuse" stroke="black" rx="3" ry="3"></rect></g><g id="frontendTask"><rect width="120" height="30" fill="cyan" stroke="black" rx="3" ry="3"></rect></g><g id="frontendTaskType"><rect width="100" height="30" fill="gainsboro" stroke="black" rx="3" ry="3"></rect></g><g id="cleanTask"><use xlink:href="#gradleTask"></use><text x="60" y="16" dominant-baseline="middle" text-anchor="middle" font-size="0.6rem">clean</text></g><g id="checkTask"><use xlink:href="#gradleTask"></use><text x="60" y="16" dominant-baseline="middle" text-anchor="middle" font-size="0.6rem">check</text></g><g id="assembleTask"><use xlink:href="#gradleTask"></use><text x="60" y="16" dominant-baseline="middle" text-anchor="middle" font-size="0.6rem">assemble</text></g><g id="publishTask"><use xlink:href="#gradleTask"></use><text x="60" y="16" dominant-baseline="middle" text-anchor="middle" font-size="0.6rem">publish</text></g><g id="installNodeTask"><use xlink:href="#frontendTask"></use><text x="60" y="16" dominant-baseline="middle" text-anchor="middle" font-size="0.6rem"> installNode </text></g><g id="installCorepackTask"><use xlink:href="#frontendTask"></use><text x="60" y="16" dominant-baseline="middle" text-anchor="middle" font-size="0.6rem"> installCorepack </text></g><g id="resolvePackageManagerTask"><use xlink:href="#frontendTask"></use><text x="60" y="16" dominant-baseline="middle" text-anchor="middle" font-size="0.6rem"> resolvePackageManager </text></g><g id="installPackageManagerTask"><use xlink:href="#frontendTask"></use><text x="60" y="16" dominant-baseline="middle" text-anchor="middle" font-size="0.6rem"> installPackageManager </text></g><g id="installFrontendTask"><use xlink:href="#frontendTask"></use><text x="60" y="16" dominant-baseline="middle" text-anchor="middle" font-size="0.6rem"> installFrontend </text></g><g id="cleanFrontendTask"><use xlink:href="#frontendTask"></use><text x="60" y="16" dominant-baseline="middle" text-anchor="middle" font-size="0.6rem"> cleanFrontend </text></g><g id="checkFrontendTask"><use xlink:href="#frontendTask"></use><text x="60" y="16" dominant-baseline="middle" text-anchor="middle" font-size="0.6rem"> checkFrontend </text></g><g id="assembleFrontendTask"><use xlink:href="#frontendTask"></use><text x="60" y="16" dominant-baseline="middle" text-anchor="middle" font-size="0.6rem"> assembleFrontend </text></g><g id="publishFrontendTask"><use xlink:href="#frontendTask"></use><text x="60" y="16" dominant-baseline="middle" text-anchor="middle" font-size="0.6rem"> publishFrontend </text></g><g id="RunNodeTaskType"><use xlink:href="#frontendTaskType"></use><text x="50" y="16" dominant-baseline="middle" text-anchor="middle" font-size="0.6rem">RunNode</text></g><g id="RunCorepackTaskType"><use xlink:href="#frontendTaskType"></use><text x="50" y="16" dominant-baseline="middle" text-anchor="middle" font-size="0.6rem"> RunCorepack </text></g><g id="RunNpmTaskType"><use xlink:href="#frontendTaskType"></use><text x="50" y="16" dominant-baseline="middle" text-anchor="middle" font-size="0.6rem">RunNpm</text></g><g id="RunPnpmTaskType"><use xlink:href="#frontendTaskType"></use><text x="50" y="16" dominant-baseline="middle" text-anchor="middle" font-size="0.6rem">RunPnpm</text></g><g id="RunYarnTaskType"><use xlink:href="#frontendTaskType"></use><text x="50" y="16" dominant-baseline="middle" text-anchor="middle" font-size="0.6rem">RunYarn</text></g><marker id="arrow" viewBox="0 0 10 10" refX="5" refY="5" markerWidth="6" markerHeight="6" orient="auto-start-reverse" fill="violet"><path d="M 0 0 L 10 5 L 0 10 z"></path></marker>',22),be={id:"gradleBasePlugin"},xe=s("rect",{x:"0",y:"0",width:"460",height:"70",fill:"none",stroke:"grey"},null,-1),Te=s("text",{x:"20",y:"18","font-size":"0.5rem",fill:"grey"},"Gradle Base plugin",-1),Fe=s("use",{x:"20",y:"30","xlink:href":"#cleanTask"},null,-1),ve=s("use",{x:"170",y:"30","xlink:href":"#checkTask"},null,-1),we=s("use",{x:"320",y:"30","xlink:href":"#assembleTask"},null,-1),Pe=s("g",{id:"gradlePublishingPlugin"},[s("rect",{x:"480",y:"0",width:"160",height:"70",fill:"none",stroke:"grey"}),s("text",{"text-anchor":"end",x:"620",y:"18","font-size":"0.5rem",fill:"grey"},"Gradle Publishing plugin"),s("use",{x:"500",y:"30","xlink:href":"#publishTask"})],-1),De={id:"frontendGradlePlugin"},Ce=s("rect",{x:"0",y:"80",width:"640",height:"360",fill:"none",stroke:"grey"},null,-1),$e=s("text",{"text-anchor":"end",x:"620",y:"238","font-size":"0.5rem",fill:"grey"},"Frontend Gradle plugin",-1),Se=s("use",{x:"20",y:"90","xlink:href":"#cleanFrontendTask"},null,-1),Ie=s("use",{x:"170",y:"90","xlink:href":"#checkFrontendTask"},null,-1),Ge=s("use",{x:"320",y:"90","xlink:href":"#assembleFrontendTask"},null,-1),Re=s("use",{x:"500",y:"90","xlink:href":"#publishFrontendTask"},null,-1),Ne=s("use",{x:"170",y:"150","xlink:href":"#installFrontendTask"},null,-1),Le=s("use",{x:"170",y:"210","xlink:href":"#installPackageManagerTask"},null,-1),Ae=s("use",{x:"20",y:"270","xlink:href":"#installCorepackTask"},null,-1),Me=s("use",{x:"320",y:"270","xlink:href":"#resolvePackageManagerTask"},null,-1),je=s("use",{x:"170",y:"330","xlink:href":"#installNodeTask"},null,-1),ze=s("line",{x1:"0",y1:"370",x2:"640",y2:"370",stroke:"gainsboro","stroke-dasharray":"4 2"},null,-1),Ee=s("text",{"text-anchor":"middle",x:"320",y:"388","font-size":"0.5rem",fill:"darkgrey"}," Additional task types ",-1),Oe=s("use",{x:"10",y:"400","xlink:href":"#RunNodeTaskType"},null,-1),Je=s("use",{x:"140",y:"400","xlink:href":"#RunCorepackTaskType"},null,-1),Ye=s("use",{x:"270",y:"400","xlink:href":"#RunNpmTaskType"},null,-1),Ue=s("use",{x:"400",y:"400","xlink:href":"#RunPnpmTaskType"},null,-1),Be=s("use",{x:"530",y:"400","xlink:href":"#RunYarnTaskType"},null,-1),Ve=O('<use xlink:href="#gradleBasePlugin"></use><use xlink:href="#gradlePublishingPlugin"></use><use xlink:href="#frontendGradlePlugin"></use><line x1="80" y1="60" x2="80" y2="87" stroke="violet" marker-end="url(#arrow)"></line><line x1="230" y1="60" x2="230" y2="87" stroke="violet" marker-end="url(#arrow)"></line><line x1="380" y1="60" x2="380" y2="87" stroke="violet" marker-end="url(#arrow)"></line><line x1="560" y1="60" x2="560" y2="87" stroke="violet" marker-end="url(#arrow)"></line><line x1="500" y1="105" x2="443" y2="105" stroke="violet" marker-end="url(#arrow)"></line><path d="M 80 120 Q 80 133, 140 133 T 200 147" stroke="violet" fill="transparent" marker-end="url(#arrow)"></path><line x1="230" y1="120" x2="230" y2="147" stroke="violet" marker-end="url(#arrow)"></line><path d="M 380 120 Q 380 133, 320 133 T 260 147" stroke="violet" fill="transparent" marker-end="url(#arrow)"></path><line x1="230" y1="180" x2="230" y2="207" stroke="violet" marker-end="url(#arrow)"></line><path d="M 200 240 Q 200 253, 140 253 T 80 267" stroke="violet" fill="transparent" marker-end="url(#arrow)"></path><path d="M 260 240 Q 260 253, 320 253 T 380 267" stroke="violet" fill="transparent" marker-end="url(#arrow)"></path><path d="M 80 300 Q 80 313, 140 313 T 200 327" stroke="violet" fill="transparent" marker-end="url(#arrow)"></path><path d="M 380 300 Q 380 313, 320 313 T 260 327" stroke="violet" fill="transparent" marker-end="url(#arrow)"></path>',16);function Xe(d,c){const p=w,i=S;return f(),E("svg",ge,[s("defs",null,[ye,s("g",be,[xe,Te,n(p,{path:"/current/userguide/base_plugin.html#sec:base_tasks"},{default:t(()=>[Fe]),_:1}),n(p,{path:"/current/userguide/base_plugin.html#sec:base_tasks"},{default:t(()=>[ve]),_:1}),n(p,{path:"/current/userguide/base_plugin.html#sec:base_tasks"},{default:t(()=>[we]),_:1})]),Pe,s("g",De,[Ce,$e,n(i,{path:`${d.$config.public.paths.tasks}#cleanFrontend`},{default:t(()=>[Se]),_:1},8,["path"]),n(i,{path:`${d.$config.public.paths.tasks}#checkFrontend`},{default:t(()=>[Ie]),_:1},8,["path"]),n(i,{path:`${d.$config.public.paths.tasks}#assembleFrontend`},{default:t(()=>[Ge]),_:1},8,["path"]),n(i,{path:`${d.$config.public.paths.tasks}#publishFrontend`},{default:t(()=>[Re]),_:1},8,["path"]),n(i,{path:`${d.$config.public.paths.tasks}#installFrontend`},{default:t(()=>[Ne]),_:1},8,["path"]),n(i,{path:`${d.$config.public.paths.tasks}#installPackageManager`},{default:t(()=>[Le]),_:1},8,["path"]),n(i,{path:`${d.$config.public.paths.tasks}#installCorepack`},{default:t(()=>[Ae]),_:1},8,["path"]),n(i,{path:`${d.$config.public.paths.tasks}#resolvePackageManager`},{default:t(()=>[Me]),_:1},8,["path"]),n(i,{path:`${d.$config.public.paths.tasks}#installNode`},{default:t(()=>[je]),_:1},8,["path"]),ze,Ee,n(i,{path:`${d.$config.public.paths.tasks}#RunNode`},{default:t(()=>[Oe]),_:1},8,["path"]),n(i,{path:`${d.$config.public.paths.tasks}#RunCorepack`},{default:t(()=>[Je]),_:1},8,["path"]),n(i,{path:`${d.$config.public.paths.tasks}#RunNpm`},{default:t(()=>[Ye]),_:1},8,["path"]),n(i,{path:`${d.$config.public.paths.tasks}#RunPnpm`},{default:t(()=>[Ue]),_:1},8,["path"]),n(i,{path:`${d.$config.public.paths.tasks}#RunYarn`},{default:t(()=>[Be]),_:1},8,["path"])])]),Ve])}const qe=ee(fe,[["render",Xe]]),He=y({__name:"install-node-task",setup(d){const c=[{name:"nodeVersion",type:"S",binding:"P",property:"nodeVersion"},{name:"nodeDistributionUrlRoot",type:"S",binding:"P",property:"nodeDistributionUrlRoot"},{name:"nodeDistributionUrlPathPattern",type:"S",binding:"P",property:"nodeDistributionUrlPathPattern"},{name:"nodeInstallDirectory",type:"F",binding:"P",property:"nodeInstallDirectory"}],p=[{name:"nodeExecutableFile",type:"RF",binding:"C"}];return(i,r)=>{const a=$,o=x,l=g,u=te,_=P,m=I,k=G,v=T;return f(),b(v,{name:"installNode",inputs:c,outputs:p},{title:t(()=>[e("Install "),n(a)]),nodeExecutableFile:t(()=>[n(o,{name:"nodeInstallDirectory"}),n(l,null,{default:t(()=>[e("/node.exe")]),_:1}),e(" or "),n(o,{name:"nodeInstallDirectory"}),n(l,null,{default:t(()=>[e("/bin/node")]),_:1}),e(" depending on the O/S. ")]),skipConditions:t(()=>[e(" property "),n(o,{name:"nodeDistributionProvided"}),e(" is "),n(l,null,{default:t(()=>[e("true")]),_:1}),e(". ")]),description:t(()=>[s("p",null,[e(" The task downloads a "),n(a),e(" distribution, verifies its integrity, and installs it in the directory pointed by the "),n(o,{name:"nodeInstallDirectory"}),e(" property. The URL used to download the distribution is resolved using the "),n(o,{name:"nodeDistributionUrlRoot"}),e(" property and the "),n(o,{name:"nodeDistributionUrlPathPattern"}),e(" property. Checking the distribution integrity consists of downloading a file providing the distribution shasum. This file is expected to be in the same remote web directory than the distribution archive. For example, if the distribution is located at "),n(l,null,{default:t(()=>[e("https://nodejs.org/dist/vX.Y.Z/node-vX.Y.Z-win-x64.zip")]),_:1}),e(", the plugin attempts to download the shasum file located at "),n(l,null,{default:t(()=>[e("https://nodejs.org/dist/vX.Y.Z/SHASUMS256.txt")]),_:1}),e(". By default, the plugin relies on the VM "),n(u,null,{default:t(()=>[e("network properties")]),_:1}),e(" to know if a proxy server shall be used when downloading the distribution and the shasum. A custom proxy server may also be used by defining "),n(o,{name:"httpsProxyHost"}),e(" property (respectively "),n(o,{name:"httpProxyHost"}),e(" property) if the "),n(o,{name:"nodeDistributionUrlRoot"}),e(" property uses the "),n(l,null,{default:t(()=>[e("https")]),_:1}),e(" protocol (resp. uses the "),n(l,null,{default:t(()=>[e("http")]),_:1}),e(" protocol). In case of connectivity/HTTP error, download of the distribution file and the shasum file may be retried using property "),n(o,{name:"maxDownloadAttempts"}),e(". ")]),s("p",null,[e(" If a "),n(a),e(" distribution is already installed in the system, either as a global installation or as an installation performed by another Gradle (sub-)project, and shall be used instead of a downloaded distribution, take a look at the "),n(o,{name:"nodeDistributionProvided"}),e(" property instead: when "),n(l,null,{default:t(()=>[e("true")]),_:1}),e(", this task is ignored if invoked during a Gradle build, and its outcome will always be "),n(_,{outcome:"SKIPPED"}),e(". ")]),s("p",null,[e(" The task takes advantage of "),n(m,{path:"/performance/#incremental_build"},{default:t(()=>[e("Gradle incremental build")]),_:1}),e(", and is not executed again unless one of its inputs/outputs changed. In this case, the task outcome will be "),n(_,{outcome:"UP-TO-DATE"}),e(". ")]),n(k,null,{default:t(()=>[e(" This task should not be executed directly. Gradle executes it if the build requires it. ")]),_:1})]),_:1})}}}),Qe=y({__name:"install-corepack-task",setup(d){const c=[{name:"packageJsonDirectory",type:"F",binding:"P",property:"packageJsonDirectory"},{name:"nodeInstallDirectory",type:"F",binding:"P",property:"nodeInstallDirectory"},{name:"corepackVersion",type:"RF",binding:"P",property:"corepackVersion"}],p=[{name:"corepackModuleDirectory",type:"D",binding:"C"}];return(i,r)=>{const a=x,o=g,l=se,u=$,_=J,m=I,k=P,v=G,D=T;return f(),b(D,{name:"installCorepack","depending-task-names":["installNode"],inputs:c,outputs:p,"custom-environment-variables-supported":""},{title:t(()=>[e("Install/upgrade Corepack")]),corepackModuleDirectory:t(()=>[n(a,{name:"nodeInstallDirectory"}),n(o,null,{default:t(()=>[e("/node_modules/corepack")]),_:1}),e(". ")]),skipConditions:t(()=>[n(a,{name:"corepackVersion"}),e(" property is "),n(o,null,{default:t(()=>[e("null")]),_:1}),e(". ")]),description:t(()=>[s("p",null,[e(" The purpose of this task is to allow replacing the default version of "),n(l),e(" embedded in "),n(u),e(". This may be necessary in case of "),n(l),e(" fails to install the package manager used by the project, or to continuously benefit from the latest improvements and bug fixes. By default, this task is not executed unless property "),n(a,{name:"corepackVersion"}),e(" is defined with a non-"),n(o,null,{default:t(()=>[e("null")]),_:1}),e(" value. In the latter case, the plugin executes command "),n(o,null,{default:t(()=>[e("npm install -g corepack[@<corepackVersion>]")]),_:1}),e(". Apart from a specific version number, if this property is set with the "),n(o,null,{default:t(()=>[e("latest")]),_:1}),e(" value, the plugin installs the latest version available. Note that this task will not be executed again and update Corepack automatically if a newer version is released after this task has run once successfully. Since the project may use a package manager that is not "),n(_),e(", the task disables Corepack strict behavior when running "),n(o,null,{default:t(()=>[e("npm")]),_:1}),e(" (see environment variable "),n(l,{path:"#environment-variables",label:"COREPACK_ENABLE_STRICT"}),e("). ")]),s("p",null,[e(" As the task touches the "),n(u),e(" install directory, please pay attention when using a shared "),n(u),e(" distribution ("),n(a,{name:"nodeDistributionProvided"}),e(" is "),n(o,null,{default:t(()=>[e("true")]),_:1}),e("), because this task will impact other projects using "),n(l),e(". This may be desirable or not depending on your situation. ")]),s("p",null,[e(" The task takes advantage of "),n(m,{path:"/performance/#incremental_build"},{default:t(()=>[e("Gradle incremental build")]),_:1}),e(", and is not executed again unless one of its inputs/outputs changed. In this case, the task outcome will be "),n(k,{outcome:"UP-TO-DATE"}),e(". ")]),n(v,null,{default:t(()=>[e(" This task should not be executed directly. Gradle executes it if the build requires it. ")]),_:1})]),_:1})}}}),Ze=y({__name:"resolve-package-manager-task",setup(d){const c=[{name:"packageJsonFile",type:"RF",binding:"C",optionalHint:"Whether this file exists or not changes the behavior of the task, see description hereafter."},{name:"nodeInstallDirectory",type:"F",binding:"P",property:"nodeInstallDirectory"}],p=[{name:"packageManagerSpecificationFile",type:"RF",binding:"C"},{name:"packageManagerExecutablePathFile",type:"RF",binding:"C"}];return(i,r)=>{const a=x,o=g,l=$,u=I,_=P,m=G,k=T;return f(),b(k,{name:"resolvePackageManager","depending-task-names":["installNode"],inputs:c,outputs:p,cacheable:""},{title:t(()=>[e("Resolve package manager")]),packageJsonFile:t(()=>[n(a,{name:"packageJsonDirectory"}),n(o,null,{default:t(()=>[e("/package.json")]),_:1})]),packageManagerSpecificationFile:t(()=>[n(a,{name:"cacheDirectory"}),n(o,null,{default:t(()=>[e("/resolvePackageManager/package-manager-specification.txt")]),_:1})]),packageManagerExecutablePathFile:t(()=>[n(a,{name:"cacheDirectory"}),n(o,null,{default:t(()=>[e("/resolvePackageManager/package-manager-executable-path.txt")]),_:1})]),description:t(()=>[s("p",null,[e("The behavior of this task depends on the existence of the "),n(o,null,{default:t(()=>[e("package.json")]),_:1}),e(" file:")]),s("ul",null,[s("li",null,[e(" If the "),n(o,null,{default:t(()=>[e("package.json")]),_:1}),e(" file exists, the task identifies the name and the version of the package manager applicable to the project by parsing the "),n(l,{path:"/api/packages.html#packagemanager",label:"packageManager"}),e(" property. For example, if the "),n(o,null,{default:t(()=>[e("package.json")]),_:1}),e(" file contains "),n(o,null,{default:t(()=>[e('"packageManager": "npm@9.6.7"')]),_:1}),e(", the task resolves "),n(o,null,{default:t(()=>[e("npm")]),_:1}),e(" as the name of the package manager, and "),n(o,null,{default:t(()=>[e("9.6.7")]),_:1}),e(" as its version. ")]),s("li",null,[e(" If the "),n(o,null,{default:t(()=>[e("package.json")]),_:1}),e(" file does not exist, the task removes output files to prevent side effects with other tasks provided by the plugin. ")])]),s("p",null,[e(" The task takes advantage of "),n(u,{path:"/performance/#incremental_build"},{default:t(()=>[e("Gradle incremental build")]),_:1}),e(", and is not executed again unless one of its inputs/outputs changed. In this case, the task outcome will be "),n(_,{outcome:"UP-TO-DATE"}),e(". ")]),n(m,null,{default:t(()=>[e(" This task should not be executed directly. Gradle executes it if the build requires it. ")]),_:1})]),_:1})}}}),We=y({__name:"install-package-manager-task",setup(d){const c=[{name:"packageJsonDirectory",type:"F",binding:"P",property:"packageJsonDirectory"},{name:"nodeInstallDirectory",type:"F",binding:"P",property:"nodeInstallDirectory"},{name:"packageManagerSpecificationFile",type:"RF",binding:"C"}],p=[{name:"packageManagerExecutableFile",type:"RF",binding:"C"}];return(i,r)=>{const a=x,o=g,l=R,u=I,_=P,m=G,k=T;return f(),b(k,{name:"installPackageManager","depending-task-names":["installCorepack","resolvePackageManager"],inputs:c,outputs:p,"custom-environment-variables-supported":""},{title:t(()=>[e("Install package manager")]),packageManagerSpecificationFile:t(()=>[n(a,{name:"cacheDirectory"}),n(o,null,{default:t(()=>[e("/resolvePackageManager/package-manager-specification.txt")]),_:1})]),packageManagerExecutableFile:t(()=>[e(" the package manager executable, whose path is provided by file "),n(a,{name:"cacheDirectory"}),n(o,null,{default:t(()=>[e("/resolvePackageManager/package-manager-executable-path.txt")]),_:1}),e(" (generally "),n(a,{name:"nodeInstallDirectory"}),n(o,null,{default:t(()=>[e("/[npm|pnpm|yarn].cmd")]),_:1}),e(" or "),n(a,{name:"nodeInstallDirectory"}),n(o,null,{default:t(()=>[e("/bin/[npm|pnpm|yarn]")]),_:1}),e(" depending on the O/S). ")]),skipConditions:t(()=>[n(a,{name:"packageJsonDirectory"}),n(o,null,{default:t(()=>[e("/package.json")]),_:1}),e(" file does not exist. ")]),description:t(()=>[s("p",null,[e(" The task installs the package manager resolved with task "),n(l,{name:"resolvePackageManager"}),e(", by executing command "),n(o,null,{default:t(()=>[e("corepack enable <package-manager>")]),_:1}),e(". ")]),s("p",null,[e(" The task takes advantage of "),n(u,{path:"/performance/#incremental_build"},{default:t(()=>[e("Gradle incremental build")]),_:1}),e(", and is not executed again unless one of its inputs/outputs changed. Consequently, if the task takes part of a Gradle build, its outcome will be "),n(_,{outcome:"UP-TO-DATE"}),e(". ")]),n(m,null,{default:t(()=>[e(" This task should not be executed directly. Gradle executes it if the build requires it. ")]),_:1})]),_:1})}}}),Ke={class:"card my-3"},en={class:"card-body"},nn={class:"card-title"},tn={class:"card-text"},an=s("span",{class:"font-italic"},"by default",-1),sn=y({__name:"install-frontend-task",setup(d){const c=[{name:"packageJsonDirectory",type:"F",binding:"P",property:"packageJsonDirectory"},{name:"nodeInstallDirectory",type:"F",binding:"P",property:"nodeInstallDirectory"},{name:"script",type:"S",binding:"P",property:"installScript"}];return(p,i)=>{const r=x,a=g,o=$,l=w,u=P,_=R,m=oe,k=J,v=le,D=ue,C=me,N=S,L=T;return f(),b(L,{name:"installFrontend","depending-task-names":["installPackageManager"],inputs:c,"custom-environment-variables-supported":""},{title:t(()=>[e("Install frontend dependencies")]),skipConditions:t(()=>[n(r,{name:"packageJsonDirectory"}),n(a,null,{default:t(()=>[e("/package.json")]),_:1}),e(" file does not exist. ")]),description:t(()=>[s("p",null,[e(" Depending on the package manager, this task executes either command "),n(a,null,{default:t(()=>[e("npm install")]),_:1}),e(", or command "),n(a,null,{default:t(()=>[e("pnpm install")]),_:1}),e(", or command "),n(a,null,{default:t(()=>[e("yarn install")]),_:1}),e(", by default. Consequently, the command shall install project dependencies according to the algorithm followed by each package manager (see hereafter). Optionally, this command may be customized with the "),n(r,{name:"installScript"}),e(" property (e.g. to run a "),n(a,null,{default:t(()=>[e("npm ci")]),_:1}),e(" command instead). On a developer workstation, executing this task is a good starting point to setup a workspace for development as it will install the "),n(o),e(" distribution (if not provided) as well as dependencies. ")]),s("div",Ke,[s("div",en,[s("h5",nn,[e(" About "),n(l,{path:"/current/userguide/incremental_build.html"},{default:t(()=>[e("incremental build")]),_:1}),e(" and up-to-date checks ")]),s("div",tn,[s("p",null,[e(" If you execute this task several times in a row, you may notice the "),n(a,null,{default:t(()=>[e("npm")]),_:1}),e("/"),n(a,null,{default:t(()=>[e("pnpm")]),_:1}),e("/"),n(a,null,{default:t(()=>[e("yarn")]),_:1}),e(" command is always executed: Gradle does not reuse task outputs based on a previous execution with the "),n(u,{outcome:"SUCCESS"}),e(" outcome. This is the expected behaviour "),an,e(" because the task does not declare any relevant input(s) and output(s) Gradle could track to know the task is already "),n(u,{outcome:"UP-TO-DATE"}),e(" (e.g. unlike the "),n(_,{name:"installNode"}),e(" task). Resolving these inputs/outputs is a bit complex, since it depends on the package manager, the value of the "),n(r,{name:"installScript"}),e(" property, and the files present in the project. That's why incremental build for this task is not available out-of-the-box by now. However, some "),n(m,{path:"/tree/main/examples"},{default:t(()=>[e("examples")]),_:1}),e(" provide guidelines to customize this task and limit executions under certain circumstances. Notes hereafter provide also some unofficial ideas: ")]),s("ul",null,[s("li",null,[n(k),e(": inputs may be one or more of files "),n(a,null,{default:t(()=>[e("package.json")]),_:1}),e(", "),n(a,null,{default:t(()=>[e("npm-shrinkwrap.json")]),_:1}),e(", "),n(a,null,{default:t(()=>[e("package-lock.json")]),_:1}),e(", "),n(a,null,{default:t(()=>[e("yarn.lock")]),_:1}),e(", while outputs may be the "),n(a,null,{default:t(()=>[e("node_modules")]),_:1}),e(" directory and the "),n(a,null,{default:t(()=>[e("package-lock.json")]),_:1}),e(" file (see "),n(v,{path:"/cli/v10/commands/npm-install"},{default:t(()=>[e("npm install")]),_:1}),e("). If the "),n(r,{name:"installScript"}),e(" property is set with "),n(a,null,{default:t(()=>[e("ci")]),_:1}),e(", file "),n(a,null,{default:t(()=>[e("package-lock.json")]),_:1}),e(" or file "),n(a,null,{default:t(()=>[e("npm-shrinkwrap.json")]),_:1}),e(" may be the only possible input file, if one or the other exists, and the "),n(a,null,{default:t(()=>[e("node_modules")]),_:1}),e(" directory the only output. ")]),s("li",null,[n(D),e(": inputs may be one or more of files "),n(a,null,{default:t(()=>[e("package.json")]),_:1}),e(", "),n(a,null,{default:t(()=>[e("pnpm-lock.yaml")]),_:1}),e(", while outputs may be the "),n(a,null,{default:t(()=>[e("node_modules")]),_:1}),e(" directory and the "),n(a,null,{default:t(()=>[e("pnpm-lock.yaml")]),_:1}),e(" file. ")]),s("li",null,[n(C),e(": inputs may be one or more of files "),n(a,null,{default:t(()=>[e("package.json")]),_:1}),e(", "),n(a,null,{default:t(()=>[e("yarn.lock")]),_:1}),e(", while outputs may be the "),n(a,null,{default:t(()=>[e("node_modules")]),_:1}),e(" directory, or the "),n(a,null,{default:t(()=>[e(".pnp.cjs")]),_:1}),e(" file and the "),n(a,null,{default:t(()=>[e(".yarn/cache")]),_:1}),e(" directory ("),n(C,{label:"Zero-installs",title:"Zero-Install feature"}),e("), and the "),n(a,null,{default:t(()=>[e("yarn.lock")]),_:1}),e(" file. ")])]),s("p",null,[e(" If you are about to tweak this task to declare additional inputs and outputs, take a look at these "),n(N,{path:`${p.$config.public.paths.tasks}#builtin-tasks-customization`},{default:t(()=>[e("recommendations")]),_:1},8,["path"]),e(". ")])])])])]),_:1})}}}),on=y({__name:"clean-frontend-task",setup(d){const c=[{name:"packageJsonDirectory",type:"F",binding:"P",property:"packageJsonDirectory"},{name:"nodeInstallDirectory",type:"F",binding:"P",property:"nodeInstallDirectory"},{name:"script",type:"S",binding:"P",property:"cleanScript"}];return(p,i)=>{const r=x,a=g,o=w,l=T;return f(),b(l,{name:"cleanFrontend","depending-task-names":["installFrontend"],inputs:c,"custom-environment-variables-supported":""},{title:t(()=>[e("Clean frontend artifacts")]),skipConditions:t(()=>[n(r,{name:"packageJsonDirectory"}),n(a,null,{default:t(()=>[e("/package.json")]),_:1}),e(" file does not exist, or "),n(r,{name:"cleanScript"}),e(" is "),n(a,null,{default:t(()=>[e("null")]),_:1}),e(". ")]),description:t(()=>[s("p",null,[e(" This task does nothing by default, considering frontend artifacts (minimified Javascript, CSS, HTML files...) are generated in the "),n(a,null,{default:t(()=>[e("${project.buildDir}")]),_:1}),e(" directory. If it is not the case, this task may be useful to clean the relevant directory. A clean script shall be defined in the "),n(a,null,{default:t(()=>[e("package.json")]),_:1}),e(" file, and the "),n(r,{name:"cleanScript"}),e(" property shall be set with the corresponding "),n(a,null,{default:t(()=>[e("npm")]),_:1}),e("/"),n(a,null,{default:t(()=>[e("pnpm")]),_:1}),e("/"),n(a,null,{default:t(()=>[e("yarn")]),_:1}),e(" command. Apart from direct execution, the task is also executed when the Gradle lifecycle "),n(o,{path:"/current/userguide/base_plugin.html#sec:base_tasks"},{default:t(()=>[e("clean")]),_:1}),e(" task is executed. ")])]),_:1})}}}),ln={class:"card my-3"},rn={class:"card-body"},dn={class:"card-title"},cn={class:"card-text"},pn=y({__name:"assemble-frontend-task",setup(d){const c=[{name:"packageJsonDirectory",type:"F",binding:"P",property:"packageJsonDirectory"},{name:"nodeInstallDirectory",type:"F",binding:"P",property:"nodeInstallDirectory"},{name:"script",type:"S",binding:"P",property:"assembleScript"}];return(p,i)=>{const r=x,a=g,o=w,l=P,u=R,_=S,m=T;return f(),b(m,{name:"assembleFrontend","depending-task-names":["installFrontend"],inputs:c,"custom-environment-variables-supported":""},{title:t(()=>[e("Assemble frontend artifacts")]),skipConditions:t(()=>[n(r,{name:"packageJsonDirectory"}),n(a,null,{default:t(()=>[e("/package.json")]),_:1}),e(" file does not exist, or "),n(r,{name:"assembleScript"}),e(" is "),n(a,null,{default:t(()=>[e("null")]),_:1}),e(". ")]),description:t(()=>[e(" This task allows to execute a build script as part of a Gradle build. The build script shall be defined in the "),n(a,null,{default:t(()=>[e("package.json")]),_:1}),e(" file, and the "),n(r,{name:"assembleScript"}),e(" property shall be set with the corresponding "),n(a,null,{default:t(()=>[e("npm")]),_:1}),e("/"),n(a,null,{default:t(()=>[e("pnpm")]),_:1}),e("/"),n(a,null,{default:t(()=>[e("yarn")]),_:1}),e(" command. Apart from direct execution, the task is also executed when the Gradle lifecycle "),n(o,{path:"/current/userguide/base_plugin.html#sec:base_tasks"},{default:t(()=>[e("assemble")]),_:1}),e(" task is executed. "),s("div",ln,[s("div",rn,[s("h5",dn,[e(" About "),n(o,{path:"/current/userguide/incremental_build.html"},{default:t(()=>[e("incremental build")]),_:1}),e(" and up-to-date checks ")]),s("p",cn,[e(" If you execute this task several times in a row, you may notice the "),n(a,null,{default:t(()=>[e("npm")]),_:1}),e("/"),n(a,null,{default:t(()=>[e("pnpm")]),_:1}),e("/"),n(a,null,{default:t(()=>[e("yarn")]),_:1}),e(" command is always executed: Gradle does not skip the task based on a previous execution with the "),n(l,{outcome:"SUCCESS"}),e(" outcome. This is the expected behaviour because the task does not declare any input/output Gradle could track, to know the task is already "),n(l,{outcome:"UP-TO-DATE"}),e(" (e.g. unlike task "),n(u,{name:"installNode"}),e("). The task provides the ability to plug the developer's own Javascript build process to Gradle, and nothing more. Every Javascript build process is unique: it depends on the project, the languages involved (e.g. TypeScript, JSX, ECMA script, SASS, SCSS...), the directory layout, the build utilities (Webpack...), etc., chosen by the team. Moreover, some build utilities are already able to build artifacts incrementally. The plugin does not duplicate this logic. If you are about to tweak this task, take a look at these "),n(_,{path:`${p.$config.public.paths.tasks}#builtin-tasks-customization`},{default:t(()=>[e("recommendations")]),_:1},8,["path"]),e(". ")])])])]),_:1})}}}),un=y({__name:"check-frontend-task",setup(d){const c=[{name:"packageJsonDirectory",type:"F",binding:"P",property:"packageJsonDirectory"},{name:"nodeInstallDirectory",type:"F",binding:"P",property:"nodeInstallDirectory"},{name:"script",type:"S",binding:"P",property:"checkScript"}];return(p,i)=>{const r=x,a=g,o=w,l=T;return f(),b(l,{name:"checkFrontend","depending-task-names":["installFrontend"],inputs:c,"custom-environment-variables-supported":""},{title:t(()=>[e("Check frontend application")]),skipConditions:t(()=>[n(r,{name:"packageJsonDirectory"}),n(a,null,{default:t(()=>[e("/package.json")]),_:1}),e(" file does not exist, or "),n(r,{name:"checkScript"}),e(" is "),n(a,null,{default:t(()=>[e("null")]),_:1}),e(". ")]),description:t(()=>[s("p",null,[e(" This task may be used to integrate a check script into a Gradle build. The check script shall be defined in the "),n(a,null,{default:t(()=>[e("package.json")]),_:1}),e(" file, and the "),n(r,{name:"checkScript"}),e(" property shall be set with the corresponding "),n(a,null,{default:t(()=>[e("npm")]),_:1}),e("/"),n(a,null,{default:t(()=>[e("pnpm")]),_:1}),e("/"),n(a,null,{default:t(()=>[e("yarn")]),_:1}),e(" command. A typical check script may lint source files, execute tests, and/or perform additional analysis actions. Apart from direct execution, the task is also executed when the Gradle lifecycle "),n(o,{path:"/current/userguide/base_plugin.html#sec:base_tasks"},{default:t(()=>[e("check")]),_:1}),e(" task is executed. ")])]),_:1})}}}),mn=y({__name:"publish-frontend-task",setup(d){const c=[{name:"packageJsonDirectory",type:"F",binding:"P",property:"packageJsonDirectory"},{name:"nodeInstallDirectory",type:"F",binding:"P",property:"nodeInstallDirectory"},{name:"script",type:"S",binding:"P",property:"publishScript"}];return(p,i)=>{const r=x,a=g,o=T;return f(),b(o,{name:"publishFrontend","depending-task-names":["assembleFrontend"],inputs:c,"custom-environment-variables-supported":""},{title:t(()=>[e("Publish frontend artifacts")]),skipConditions:t(()=>[n(r,{name:"packageJsonDirectory"}),n(a,null,{default:t(()=>[e("/package.json")]),_:1}),e(" file does not exist, or "),n(r,{name:"assembleScript"}),e(" is "),n(a,null,{default:t(()=>[e("null")]),_:1}),e(", or "),n(r,{name:"publishScript"}),e(" is "),n(a,null,{default:t(()=>[e("null")]),_:1}),e(". ")]),description:t(()=>[s("p",null,[e(" This task may be used to integrate a publish script into a Gradle build. The publish script shall be defined in the "),n(a,null,{default:t(()=>[e("package.json")]),_:1}),e(" file, and the "),n(r,{name:"publishScript"}),e(" property shall be set with the corresponding "),n(a,null,{default:t(()=>[e("npm")]),_:1}),e("/"),n(a,null,{default:t(()=>[e("pnpm")]),_:1}),e("/"),n(a,null,{default:t(()=>[e("yarn")]),_:1}),e(" command. Apart from direct execution, the task is also executed when the Gradle "),n(a,null,{default:t(()=>[e("publish")]),_:1}),e(" task is executed. ")])]),_:1})}}}),_n=s("p",null,"The plugin registers multiple tasks, that may have dependencies with each other, and also with:",-1),hn={class:"text-center"},kn=s("p",null,"Example hereafter shows how to customize the environment for a given task:",-1),j="Gradle tasks to run node, corepack, npm, pnpm, yarn commands",z="Gradle tasks and types provided by the plugin to run node/corepack/npm/pnpm/yarn: integration, dependencies, customization, recommendations",jn=y({__name:"node-corepack-npm-pnpm-yarn-tasks",setup(d){const c=ne(),p=`${c.public.canonicalBaseUrl}${c.public.paths.tasks}`;return ke({link:[{rel:"canonical",href:p}]}),Z({description:z,ogDescription:z,ogTitle:j,ogUrl:p,title:j}),(i,r)=>{const a=W,o=w,l=g,u=K,_=qe,m=ae,k=He,v=Qe,D=Ze,C=We,N=sn,L=on,Y=pn,U=un,B=mn,V=ie,X=re,q=de,H=ce,Q=pe,M=S,h=R,A=_e,F=he;return f(),E("section",null,[n(a,null,{default:t(()=>[e("Tasks")]),_:1}),_n,s("ul",null,[s("li",null,[e(" Gradle lifecycle tasks defined in the "),n(o,{path:"/current/userguide/base_plugin.html"},{default:t(()=>[e("Gradle Base plugin")]),_:1}),e(": "),n(l,null,{default:t(()=>[e("clean")]),_:1}),e(", "),n(l,null,{default:t(()=>[e("assemble")]),_:1}),e(", "),n(l,null,{default:t(()=>[e("check")]),_:1}),e(". ")]),s("li",null,[e(" Tasks defined in the Gradle Publishing plugin: "),n(l,null,{default:t(()=>[e("publish")]),_:1}),e(". ")])]),n(u,null,{default:t(()=>[e("Dependency tree")]),_:1}),s("p",hn,[n(_,{class:"w-100"})]),n(u,null,{default:t(()=>[e("Reference")]),_:1}),s("section",null,[n(m,null,{default:t(()=>[e("Built-in tasks")]),_:1}),n(k),n(v),n(D),n(C),n(N),n(L),n(Y),n(U),n(B)]),s("section",null,[n(m,null,{default:t(()=>[e("Additional types")]),_:1}),n(V),n(X),n(q),n(H),n(Q)]),s("section",null,[n(m,{id:"custom-environment-variables"},{default:t(()=>[e(" Environment variables in "),n(l,null,{default:t(()=>[e("node")]),_:1}),e("-based tasks "),n(M,{path:`${i.$config.public.paths.tasks}#app`,class:"small text-info"},{default:t(()=>[e("↑")]),_:1},8,["path"])]),_:1}),s("p",null,[e(" The plugin provides multiple tasks or types that execute under-the-hood a "),n(l,null,{default:t(()=>[e("node")]),_:1}),e("-based command: "),n(h,{name:"installCorepack"}),e(", "),n(h,{name:"installPackageManager"}),e(", "),n(h,{name:"installFrontend"}),e(", "),n(h,{name:"cleanFrontend"}),e(", "),n(h,{name:"assembleFrontend"}),e(", "),n(h,{name:"checkFrontend"}),e(", "),n(h,{name:"publishFrontend"}),e(", "),n(h,{name:"RunNode"}),e(", "),n(h,{name:"RunCorepack"}),e(", "),n(h,{name:"RunNpm"}),e(", "),n(h,{name:"RunPnpm"}),e(", "),n(h,{name:"RunYarn"}),e(". These tasks forward environment variables visible by the Gradle process to "),n(l,null,{default:t(()=>[e("node")]),_:1}),e(", "),n(l,null,{default:t(()=>[e("corepack")]),_:1}),e(", "),n(l,null,{default:t(()=>[e("npm")]),_:1}),e(", "),n(l,null,{default:t(()=>[e("pnpm")]),_:1}),e(", "),n(l,null,{default:t(()=>[e("yarn")]),_:1}),e(" commands. These variables may be overwritten and/or new variables may be added to the environment forwarded to the command. If you need to alter the "),n(l,null,{default:t(()=>[e("PATH")]),_:1}),e(" environment variable, and though this is generally a rare situation, keep in mind the plugin adds its own paths so as the relevant "),n(l,null,{default:t(()=>[e("node")]),_:1}),e(" executable can be found. ")]),kn,n(A,null,{groovy:t(()=>[s("pre",null,[n(l,null,{default:t(()=>[e(`
import org.siouan.frontendgradleplugin.infrastructure.gradle.AssembleTask
tasks.named('assembleFrontend', AssembleTask) {
    environmentVariables.put('NODE_OPTIONS', '--max_old_space_size=50 --title="Assembling frontend"')
}`)]),_:1})])]),kotlin:t(()=>[s("pre",null,[n(l,null,{default:t(()=>[e(`
import org.siouan.frontendgradleplugin.infrastructure.gradle.AssembleTask
tasks.named<AssembleTask>("assembleFrontend") {
    environmentVariables.put("NODE_OPTIONS", "--max_old_space_size=50 --title=\\"Assembling frontend\\"")
}`)]),_:1})])]),_:1}),s("p",null,[e(" Example hereafter shows how to apply an environment variable to all tasks running a "),n(l,null,{default:t(()=>[e("node")]),_:1}),e("-based command: ")]),n(A,null,{groovy:t(()=>[s("pre",null,[n(l,null,{default:t(()=>[e(`
import org.siouan.frontendgradleplugin.infrastructure.gradle.AbstractRunCommandTask
tasks.withType(AbstractRunCommandTask) {
    environmentVariables.put('NODE_DEBUG', 'module')
}`)]),_:1})])]),kotlin:t(()=>[s("pre",null,[n(l,null,{default:t(()=>[e(`
import org.siouan.frontendgradleplugin.infrastructure.gradle.AbstractRunCommandTask
tasks.withType<AbstractRunCommandTask> {
    environmentVariables.put("NODE_DEBUG", "module")
}`)]),_:1})])]),_:1}),n(m,{id:"builtin-tasks-customization"},{default:t(()=>[e(" Built-in tasks customization "),n(M,{path:`${i.$config.public.paths.tasks}#app`,class:"small text-info"},{default:t(()=>[e("↑")]),_:1},8,["path"])]),_:1}),s("p",null,[e(" If you need to customize the plugin's built-in tasks (e.g. declare additional I/O or dependencies), it is important to conform to the "),n(o,{path:"/current/userguide/task_configuration_avoidance.html#sec:old_vs_new_configuration_api_overview"},{default:t(()=>[e("Configuration avoidance API")]),_:1}),e(": use references of task providers instead of references of tasks, and continue taking advantage of the lazy configuration strategy the plugin already implements. The examples below introduce the implementation expected with simple cases: ")]),n(A,null,{groovy:t(()=>[s("pre",null,[n(l,null,{default:t(()=>[n(F,null,{default:t(()=>[e(`// Configuring a predefined task.
// LEGACY SYNTAX: task 'installFrontend' is immediately created and configured, as well as task
// 'otherTask', even if both tasks are not executed.`)]),_:1}),e(`
installFrontend {
    dependsOn 'otherTask'
    inputs.files('package.json', 'package-lock.json')
}
`),n(F,null,{default:t(()=>[e(`// MODERN SYNTAX: task 'installFrontend' is created and configured only when Gradle is about to execute it.
// Consequently, task 'otherTask' is also created and configured later. Let's also reinforce this behaviour
// by using its provider to retrieve the task.`)]),_:1}),e(`
tasks.named('installFrontend') {
    dependsOn tasks.named('otherTask')
    inputs.files('package.json', 'package-lock.json')
}

`),n(F,null,{default:t(()=>[e(`// Defining a new task
// LEGACY SYNTAX: task 'eagerTask' is immediately created and configured, as well as task
// 'installFrontend', even if both tasks are not executed.`)]),_:1}),e(`
task eagerTask {
    dependsOn 'installFrontend'
}
`),n(F,null,{default:t(()=>[e(`// MODERN SYNTAX: task 'lazyTask' is created and configured only when Gradle is about to execute it.
// Consequently, task 'installFrontend' is also created and configured later. Let's also reinforce this
// behaviour by using its provider to retrieve the task.`)]),_:1}),e(`
tasks.register('lazyTask') {
    dependsOn tasks.named('installFrontend')
}`)]),_:1})])]),kotlin:t(()=>[s("pre",null,[n(l,null,{default:t(()=>[n(F,null,{default:t(()=>[e(`// Configuring a predefined task.
// LEGACY SYNTAX: task 'installFrontend' is immediately created and configured, as well as task
// 'otherTask', even if both tasks are not executed.`)]),_:1}),e(`
installFrontend {
    dependsOn("otherTask")
    inputs.files("package.json", "package-lock.json")
}
`),n(F,null,{default:t(()=>[e(`// MODERN SYNTAX: task 'installFrontend' is created and configured only when Gradle is about to execute it.
// Consequently, task 'otherTask' is also created and configured later.`)]),_:1}),e(`
tasks.named<InstallFrontendTask>("installFrontend") {
    dependsOn(tasks.named("otherTask"))
    inputs.files("package.json", "package-lock.json")
}

`),n(F,null,{default:t(()=>[e(`// Defining a new task
// LEGACY SYNTAX: task 'eagerTask' is immediately created and configured, as well as task
// 'installFrontend', even if both tasks are not executed.`)]),_:1}),e(`
task eagerTask {
    dependsOn("installFrontend")
}
`),n(F,null,{default:t(()=>[e(`// MODERN SYNTAX: task 'lazyTask' is created and configured only when Gradle is about to execute it.
// Consequently, task 'installFrontend' is also created and configured later. Let's also reinforce this
// behaviour by using its provider to retrieve the task.`)]),_:1}),e(`
tasks.register("lazyTask") {
    dependsOn(tasks.named("installFrontend"))
}`)]),_:1})])]),_:1}),s("p",null,[e(" If your application uses the legacy syntax, you may find further instructions to migrate to the modern syntax in this Gradle "),n(o,{path:"/current/userguide/task_configuration_avoidance.html#sec:task_configuration_avoidance_migration_guidelines"},{default:t(()=>[e("guide")]),_:1}),e(". ")])])])}}});export{jn as default};
