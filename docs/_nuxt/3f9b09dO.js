import{_ as d}from"./BlmrrCf-.js";import{_ as y}from"./D8YflT2D.js";import{_ as b}from"./bFTfBRhu.js";import{b as p}from"./C1-MS7Z_.js";import{_ as m}from"./DlAUqK2U.js";import{o as f,e as a,w as o,d as t,b as l,a as e}from"./Bt6BF8tg.js";import{_ as k}from"./D14qE6Wt.js";import{_ as x}from"./d46FRxqf.js";const w={};function F(g,n){const r=d,s=y,u=b,i=p;return f(),a(i,null,{question:o(()=>[n[5]||(n[5]=t(" How to use ")),l(r,null,{default:o(()=>n[0]||(n[0]=[t("node")])),_:1}),n[6]||(n[6]=t("/")),l(r,null,{default:o(()=>n[1]||(n[1]=[t("corepack")])),_:1}),n[7]||(n[7]=t("/")),l(r,null,{default:o(()=>n[2]||(n[2]=[t("npm")])),_:1}),n[8]||(n[8]=t("/")),l(r,null,{default:o(()=>n[3]||(n[3]=[t("pnpm")])),_:1}),n[9]||(n[9]=t("/")),l(r,null,{default:o(()=>n[4]||(n[4]=[t("yarn")])),_:1}),n[10]||(n[10]=t(" executables apart from Gradle when the ")),l(s),n[11]||(n[11]=t(" distribution is downloaded by the plugin? "))]),answer:o(()=>[e("ul",null,[e("li",null,[n[13]||(n[13]=t(" Create a ")),l(r,null,{default:o(()=>n[12]||(n[12]=[t("NODEJS_HOME")])),_:1}),n[14]||(n[14]=t(" environment variable (or a name of your choice) containing the real path set in the ")),l(u,{name:"nodeInstallDirectory"}),n[15]||(n[15]=t(" property. "))]),e("li",null,[n[23]||(n[23]=t(" Add the directory containing executables to the ")),l(r,null,{default:o(()=>n[16]||(n[16]=[t("PATH")])),_:1}),n[24]||(n[24]=t(" environment variable: ")),e("ul",null,[e("li",null,[n[18]||(n[18]=t(" On Unix-like O/S, add the ")),l(r,null,{default:o(()=>n[17]||(n[17]=[t("$NODEJS_HOME/bin")])),_:1}),n[19]||(n[19]=t(" path. "))]),e("li",null,[n[21]||(n[21]=t("On Windows O/S, add ")),l(r,null,{default:o(()=>n[20]||(n[20]=[t("%NODEJS_HOME%")])),_:1}),n[22]||(n[22]=t(" path."))])])])])]),_:1})}const T=m(w,[["render",F]]),O={};function _(g,n){const r=d,s=k,u=x,i=p;return f(),a(i,null,{question:o(()=>[n[1]||(n[1]=t(" What's the purpose of the ")),l(r,null,{default:o(()=>n[0]||(n[0]=[t(".frontend-gradle-plugin")])),_:1}),n[2]||(n[2]=t(" directory generated in each project? "))]),answer:o(()=>[n[6]||(n[6]=t(" The plugin uses this directory to store some task outputs as files, so as Gradle can perform ")),l(s,{path:"/current/userguide/incremental_build.html"},{default:o(()=>n[3]||(n[3]=[t("up-to-date checks")])),_:1}),n[7]||(n[7]=t(". It allows to skip some task execution and optimize build time when inputs did not change, by reusing the already computed outputs. Generally, the ")),l(r,null,{default:o(()=>n[4]||(n[4]=[t("build")])),_:1}),n[8]||(n[8]=t(" directory of the project is used for such goal, but the plugin cannot rely on this directory because it is removed when Gradle ")),l(r,null,{default:o(()=>n[5]||(n[5]=[t("clean")])),_:1}),n[9]||(n[9]=t(" task is executed. This would remove mandatory outputs for plugin task ")),l(u,{name:"cleanFrontend"}),n[10]||(n[10]=t(". "))]),_:1})}const q=m(O,[["render",_]]);export{T as _,q as a};
