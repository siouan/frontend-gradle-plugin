import{_ as m}from"./BHt_xBA0.js";import{_ as i}from"./zck6Z6fF.js";import{_ as s}from"./g2CN4m-W.js";import{_ as l}from"./DlAUqK2U.js";import{o as c,f as d,w as n,a as _,d as e,b as t}from"./0eoLPSdn.js";import{_ as h}from"./DQimxJDu.js";import{_ as y}from"./DysKOmB8.js";const g={};function b(p,u){const o=m,r=i,a=s;return c(),d(a,{name:"nodeVersion",type:"java.lang.String",required:!1,"default-value":null,example:"14.17.3","task-names":["installNode"]},{default:n(()=>[_("p",null,[e(" The version number is used to build the exact URL to download the distribution, as long as the "),t(o,{name:"nodeDistributionUrlPathPattern"}),e(" property contains the "),t(r,null,{default:n(()=>[e("VERSION")]),_:1}),e(" token. The property is required when the "),t(o,{name:"nodeDistributionProvided"}),e(" property is "),t(r,null,{default:n(()=>[e("false")]),_:1}),e(". ")])]),_:1})}const T=l(g,[["render",b]]),F={};function k(p,u){const o=m,r=i,a=s;return c(),d(a,{name:"nodeInstallDirectory",type:"java.io.File",required:!1,"default-value":'file("${projectDir}/node")',"task-names":["installNode"]},{default:n(()=>[_("p",null,[e(" Directory where the downloaded distribution shall be installed, or where a provided distribution is located if the "),t(o,{name:"nodeDistributionProvided"}),e(" property is "),t(r,null,{default:n(()=>[e("true")]),_:1}),e(". ")])]),_:1})}const V=l(F,[["render",k]]),x={};function v(p,u){const o=i,r=h,a=m,f=s;return c(),d(f,{name:"yarnEnabled",type:"boolean","default-value":"false","task-names":["installYarn","installFrontend","cleanFrontend","assembleFrontend","checkFrontend","publishFrontend"]},{default:n(()=>[_("p",null,[e(" Whether "),t(o,null,{default:n(()=>[e("yarn")]),_:1}),e(" executable shall be used instead of "),t(o,null,{default:n(()=>[e("npm")]),_:1}),e(" executable when executing frontend tasks. Consequently, a "),t(r),e(" distribution is required, and the plugin will locate it depending on the value of the "),t(a,{name:"yarnDistributionProvided"}),e(" property. ")])]),_:1})}const B=l(x,[["render",v]]),w={};function P(p,u){const o=i,r=y,a=s;return c(),d(a,{name:"packageJsonDirectory",type:"java.lang.String","default-value":"$projectDir","task-names":["installFrontend","cleanFrontend","assembleFrontend","checkFrontend","publishFrontend"]},{default:n(()=>[_("p",null,[e(" Location of the directory containing the "),t(o,null,{default:n(()=>[e("package.json")]),_:1}),e(" file. By default, this file is considered to be located in the project's directory, at the same level than this "),t(o,null,{default:n(()=>[e("build.gradle[.kts]")]),_:1}),e(" file. If the "),t(o,null,{default:n(()=>[e("package.json")]),_:1}),e(" file is located in another directory, it is recommended either to set up a Gradle multi-project build, or to set this property with the appropriate directory. This directory being used as the working directory when running JS scripts, consequently, the "),t(o,null,{default:n(()=>[e("node_modules")]),_:1}),e(" directory would be created at this location after the "),t(r,{name:"installFrontend"}),e(" task is executed. ")])]),_:1})}const S=l(w,[["render",P]]);export{T as _,V as a,B as b,S as c};
